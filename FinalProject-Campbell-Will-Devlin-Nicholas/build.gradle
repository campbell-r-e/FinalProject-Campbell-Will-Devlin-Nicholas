plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group 'edu.bsu.cs.finalproject'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.json:json:20231013'
    implementation 'org.apache.logging.log4j:log4j-api:2.21.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.21.1'

    // ✅ Use JavaFX 11 instead of 21
    implementation 'org.openjfx:javafx-controls:11'
    implementation 'org.openjfx:javafx-fxml:11'
    implementation 'org.openjfx:javafx-base:11'
    implementation 'org.openjfx:javafx-graphics:11'

    // ✅ Include platform-specific dependencies (Ensures it works on macOS)
    implementation "org.openjfx:javafx-controls:11:mac"
    implementation "org.openjfx:javafx-fxml:11:mac"
    implementation "org.openjfx:javafx-base:11:mac"
    implementation "org.openjfx:javafx-graphics:11:mac"

    // ✅ Add JUnit test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(22))
    }
}

application {
    mainClass = 'edu.bsu.cs.finalproject.WeatherApp'
}

// ✅ **Ensure JavaFX is Fully Bundled in the Fat JAR**
tasks.register('guiJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveClassifier.set('gui')
    manifest {
        attributes 'Main-Class': 'edu.bsu.cs.finalproject.WeatherApp'
    }
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]

    // ✅ Ensure JavaFX dependencies are included
    dependencies {
        include(dependency("org.openjfx:.*"))
    }
    mergeServiceFiles()
}

// ✅ CLI JAR
tasks.register('cliJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveClassifier.set('cli')
    manifest {
        attributes 'Main-Class': 'edu.bsu.cs.finalproject.ConsoleEntryPoint'
    }
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]

    dependencies {
        include(dependency("org.openjfx:.*"))
    }
    mergeServiceFiles()
}

// ✅ Ensure Tests Run Separately from Shadow JAR
tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Build both JARs
tasks.build.dependsOn(guiJar, cliJar)
